library(reshape2)
library(ggplot2)
library(ggplot2)
library(ggpubr)
---
title: "wafergen"
output:
html_document:
toc: true
toc_float: true
---
# Wafergen analysis
This site shows how to analyze wafergen data
## wafergen in R
analyse data in R
### Load Library
```{r setup, include=FALSE}
library(reshape2)
library(ggplot2)
library(ggpubr)
```
## others
others
#read data
chip1 <- read.table("Lanying103018_Chip1.txt", sep="\t", header=T)[,c("Assay","Sample","Ct")]
#read data
chip1 <- read.table("../data/Lanying103018_Chip1.txt", sep="\t", header=T)[,c("Assay","Sample","Ct")]
chip2 <- read.table("../data/Lanying103018_Chip2.txt", sep="\t", header=T)[,c("Assay","Sample","Ct")]
#get sample info
meta <- read.csv("../data/meta_data.csv")
#standard
meta_std <- read.csv("../data/meta_standard.csv")
name_target = "16s"
sample_id = "sample"
dat <- rbind(chip1,chip2)
dat
View(dat)
View(dat)
unique(dat$Assay)
sub <- subset(dat, Assay %in% name_target)
sub
casted <- dcast(sub, Sample~Assay, fun=mean, value.var = "Ct")
View(casted)
View(casted)
#standard
meta_std <- read.csv("../data/meta_standard.csv")
merged_meta <- merge(merged_meta_chip, casted, by.x = sample_id, by.y="Sample")
merged_meta <- merge(meta, casted, by.x = sample_id, by.y="Sample")
meta_sub <- subset(meta_std, Assay %in% target)
meta_sub <- subset(meta_std, Assay %in% name_target)
data_sub <- subset(sub, Sample %in% meta_sub$Sample)
merged_std <- merge(data_sub, meta_sub, by.x = "Sample", by.y = "Sample", all.x=T)
merged_std_no_NA <- subset(merged_std, Ct != "NA")
ct <- merged_std_no_NA$Ct
count <-  log10(merged_std_no_NA$count+1)
```{r}
sub <- subset(dat, Assay %in% name_target)
casted <- dcast(sub, Sample~Assay, fun=mean, value.var = "Ct")
merged_meta <- merge(meta, casted, by.x = sample_id, by.y="Sample")
meta_sub <- subset(meta_std, Assay %in% name_target)
data_sub <- subset(sub, Sample %in% meta_sub$Sample)
merged_std <- merge(data_sub, meta_sub, by.x = "Sample", by.y = "Sample", all.x=T)
merged_std_no_NA <- subset(merged_std, Ct != "NA")
ct <- merged_std_no_NA$Ct
count <-  log10(merged_std_no_NA$count+1)
lm.r <- lm(ct ~ count)
coef <- coef(lm.r)[2]
eff <- 100*((10^(-1/coef))-1)
inverse.lm <- lm(count ~ ct)
View(lm.r)
lm.r
table_for_ggplot <- data.frame(ct = ct, count = count)
table_for_ggplot
ggplot(table_for_ggplot, aes(x= count, y=ct))+geom_point()
lm.r
summary(lm.r)
summary(lm.r)$r.squared
inverse.lm
